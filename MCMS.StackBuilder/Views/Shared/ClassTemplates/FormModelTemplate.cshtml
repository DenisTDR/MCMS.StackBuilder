@using MCMS.StackBuilder.Stacks.SubModels
@using MCMS.StackBuilder.Stacks
@model MCMS.StackBuilder.Stacks.StackEntity
@{
    Layout = null;
    var includes = new List<string>
    {
        "MCMS.Base.Data.FormModels",
    };
    if (Model.Properties.Any(p => p.IsValidList() || p.UseCkEditor()))
        includes.Add("MCMS.Base.SwaggerFormly.Formly.Fields");
    if (Model.Properties.Any(p => !string.IsNullOrEmpty(p.DisplayName) || p.Required))
        includes.Add("System.ComponentModel.DataAnnotations");
    if (Model.Properties.Any(p => p.IsFileWithUploadField()))
    {
        includes.Add("MCMS.Files.Attributes");
        includes.Add("MCMS.Files.Controllers");
    }
    if (Model.Properties.Any(p => p.ShouldUseSelectFormField()))
        includes.Add("MCMS.Base.SwaggerFormly.Formly.Fields");
}

<partial name="ClassTemplates/CommonUsingSection" model="(Model, includes)"/>

namespace @Model.GetNamespace()
{
public class @Model.GetNameFor(ModelType.FormModel) : IFormModel
{

@foreach (var prop in Model.Properties)
{
    if (prop.IsList)
    {
        @Html.Raw("[FormlyArray(FieldGroupClassName = \"row\", Wrappers = new[] {\"card\"})] \n")
    }
    if (prop.Type == PropertyType.String && prop.IsRichText)
    {
        @Html.Raw("[FormlyCkEditor] \n")
    }
    if (!string.IsNullOrEmpty(prop.DisplayName))
    {
        @Html.Raw("[Display(Name=\"" + prop.DisplayName + "\")] \n")
    }

    if (prop.IsFileWithUploadField())
    {
        var options = prop.FileOptions;
        var purpose = string.IsNullOrEmpty(options.FilePurpose) ? "unknown-purpose" : options.FilePurpose;
        var path = string.IsNullOrEmpty(options.FilePath) ? string.IsNullOrEmpty(options.FilePurpose) ? "default" : options.FilePurpose : options.FilePath;
        var extensions = string.IsNullOrEmpty(options.AllowedExtensions) ? "" : string.Join(", ", options.AllowedExtensions
            .Split(",", StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries).Select(ext => "\"" + ext + "\""));
        @Html.Raw("[FormlyFile(typeof(FilesAdminApiController), nameof(FilesAdminApiController.Upload), \"" +
                  $"{purpose}\",\n\"{path}\", Accept = new[] {{{extensions}}})]")
    }
    if (prop.ShouldUseSelectFormField())
    {
        @Html.Raw("[FormlySelect(typeof(" + prop.GetCustomTypeName(ModelType.AdminApiController) + "), labelProp: \"name\",\n ShowReloadButton = true)]")
    }
    if (prop.Required)
    {
        @Html.Raw("[Required]\n")
    }
    @Html.Raw($"public {prop.GetTypeStr(ModelType.FormModel)} {prop.Name} {{ get; set; }} \n")
}
}
}