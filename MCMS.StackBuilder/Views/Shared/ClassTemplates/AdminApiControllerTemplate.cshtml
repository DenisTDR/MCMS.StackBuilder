@using MCMS.StackBuilder.Stacks
@using MCMS.StackBuilder.Stacks.SubModels
@model MCMS.StackBuilder.Stacks.StackEntity
@{
    Layout = null;
    var eProps = Model.Properties.Where(p => p.Type == PropertyType.CustomType && p.IsEntityWithStack).ToList();
    var nleProps = eProps.Where(p => !p.IsList).ToList();
    var jdtProps = eProps.Where(p => p.JoinDbTable).ToList();
    var rnleSpotted = nleProps.Any(nle => nle.Required);
}
using MCMS.Controllers.Api;
@if (eProps.Any())
{
    @Html.Raw("using System.Threading.Tasks;\n")
    @Html.Raw("using MCMS.Base.Extensions;\n")
}
@if (jdtProps.Any())
{
    @Html.Raw("using Microsoft.AspNetCore.Mvc.Filters;\n")
    @Html.Raw("using Microsoft.EntityFrameworkCore;\n")
}
@if (rnleSpotted)
{
    @Html.Raw("using MCMS.Base.Exceptions;\n")
}
@if (Model.Config.HasRequiredRoles)
{
    @Html.Raw("using Microsoft.AspNetCore.Authorization;")
}


namespace @Model.GetNamespace()
{

@if (Model.Config.HasRequiredRoles)
{
    <text>
        [Authorize(Roles="@Model.Config.RequiredRoles")]
    </text>
}
public class @Model.GetNameFor(ModelType.AdminApiController) :
CrudAdminApiController @Html.Raw("<")@Model.GetNameFor(ModelType.Entity), @Model.GetNameFor(ModelType.FormModel), @Model.GetNameFor(ModelType.ViewModel)>
{
@if (jdtProps.Any())
{
    @Html.Raw(" public override void OnActionExecuting(ActionExecutingContext context) { \n")
    @Html.Raw(" base.OnActionExecuting(context); \n")
    @Html.Raw(" Repo.ChainQueryable(q => q \n")
    foreach (var prop in jdtProps)
    {
        @Html.Raw($" .Include(c => c.{prop.Name})\n")
    }
    @Html.Raw(" ); \n")
    @Html.Raw(" } \n")
}

@if (nleProps.Any())
{
    @Html.Raw($" protected override Task OnCreating({Model.GetNameFor(ModelType.Entity)} e) {{")

    foreach (var prop in nleProps)
    {
        @if (prop.Required)
        {
            <text>
                if(string.IsNullOrEmpty(e.@(prop.Name)?.Id))
                throw new KnownException("@prop.Name not provided or invalid");
            </text>
        }
        else
        {
            <text>
                if(e.@prop.Name != null)
            </text>
        }
        @Html.Raw($"\ne.{prop.Name}=ServiceProvider.GetRepo<{prop.GetCustomTypeName(ModelType.Entity)}>().Attach(e.{prop.Name});\n")
    }

    @Html.Raw("return Task.CompletedTask; ")
    @Html.Raw(" } ")
}
}
}