stages:
  - build
  - deploy

build:
  stage: build
  variables:
    IMAGE_TAG: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --pull -t "${IMAGE_TAG}" -t "${CI_REGISTRY_IMAGE}:latest" .
    - docker push "${IMAGE_TAG}"
    - docker push "${CI_REGISTRY_IMAGE}:latest"
  only:
    - main
    - deploy

.image_name: &image_name
  IMAGE_TAG: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}

.deploy base: &deploy_base
  stage: deploy
  variables:
    IMAGE_TAG: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  needs:
    - build
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no -p 2269 mcms-sb@${DEPLOY_HOST} "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && /opt/docker/tdrs.ro/b.tdrs.ro/sb-mcms.b.tdrs.ro/deploy.sh ${IMAGE_TAG} && docker logout $CI_REGISTRY "

deploy prod manual:
  <<: *deploy_base
  variables:
    DEPLOY_HOST: sb-mcms.b.tdrs.ro
    <<: *image_name
  only:
    - main
  when: manual

deploy prod automatically:
  <<: *deploy_base
  variables:
    DEPLOY_HOST: sb-mcms.b.tdrs.ro
    <<: *image_name
  only:
    - deploy
